<?php

namespace DoctrineProxies\__CG__\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class IXP extends \Entities\IXP implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Entities\\IXP' . "\0" . 'name', '' . "\0" . 'Entities\\IXP' . "\0" . 'shortname', '' . "\0" . 'Entities\\IXP' . "\0" . 'country', '' . "\0" . 'Entities\\IXP' . "\0" . 'id', '' . "\0" . 'Entities\\IXP' . "\0" . 'LANs', '' . "\0" . 'Entities\\IXP' . "\0" . 'networks', '' . "\0" . 'Entities\\IXP' . "\0" . 'created', '' . "\0" . 'Entities\\IXP' . "\0" . 'lastupdated', '' . "\0" . 'Entities\\IXP' . "\0" . 'ixf_id', '' . "\0" . 'Entities\\IXP' . "\0" . 'request'];
        }

        return ['__isInitialized__', '' . "\0" . 'Entities\\IXP' . "\0" . 'name', '' . "\0" . 'Entities\\IXP' . "\0" . 'shortname', '' . "\0" . 'Entities\\IXP' . "\0" . 'country', '' . "\0" . 'Entities\\IXP' . "\0" . 'id', '' . "\0" . 'Entities\\IXP' . "\0" . 'LANs', '' . "\0" . 'Entities\\IXP' . "\0" . 'networks', '' . "\0" . 'Entities\\IXP' . "\0" . 'created', '' . "\0" . 'Entities\\IXP' . "\0" . 'lastupdated', '' . "\0" . 'Entities\\IXP' . "\0" . 'ixf_id', '' . "\0" . 'Entities\\IXP' . "\0" . 'request'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (IXP $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortname($shortname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortname', [$shortname]);

        return parent::setShortname($shortname);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortname', []);

        return parent::getShortname();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function addLAN(\Entities\LAN $lAN)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLAN', [$lAN]);

        return parent::addLAN($lAN);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLAN(\Entities\LAN $lAN)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLAN', [$lAN]);

        return parent::removeLAN($lAN);
    }

    /**
     * {@inheritDoc}
     */
    public function getLANs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLANs', []);

        return parent::getLANs();
    }

    /**
     * {@inheritDoc}
     */
    public function addNetwork(\Entities\Network $network)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNetwork', [$network]);

        return parent::addNetwork($network);
    }

    /**
     * {@inheritDoc}
     */
    public function removeNetwork(\Entities\Network $network)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeNetwork', [$network]);

        return parent::removeNetwork($network);
    }

    /**
     * {@inheritDoc}
     */
    public function getNetworks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNetworks', []);

        return parent::getNetworks();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastupdated($lastupdated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastupdated', [$lastupdated]);

        return parent::setLastupdated($lastupdated);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastupdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastupdated', []);

        return parent::getLastupdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setIxfId($ixfId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIxfId', [$ixfId]);

        return parent::setIxfId($ixfId);
    }

    /**
     * {@inheritDoc}
     */
    public function getIxfId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIxfId', []);

        return parent::getIxfId();
    }

    /**
     * {@inheritDoc}
     */
    public function addRequest(\Entities\Request $request)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRequest', [$request]);

        return parent::addRequest($request);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRequest(\Entities\Request $request)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRequest', [$request]);

        return parent::removeRequest($request);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequest()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequest', []);

        return parent::getRequest();
    }

}
