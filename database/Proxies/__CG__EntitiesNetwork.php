<?php

namespace DoctrineProxies\__CG__\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Network extends \Entities\Network implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Entities\\Network' . "\0" . 'name', '' . "\0" . 'Entities\\Network' . "\0" . 'v4asn', '' . "\0" . 'Entities\\Network' . "\0" . 'v6asn', '' . "\0" . 'Entities\\Network' . "\0" . 'id', '' . "\0" . 'Entities\\Network' . "\0" . 'addresses', '' . "\0" . 'Entities\\Network' . "\0" . 'probes', '' . "\0" . 'Entities\\Network' . "\0" . 'requests', '' . "\0" . 'Entities\\Network' . "\0" . 'IXP', '' . "\0" . 'Entities\\Network' . "\0" . 'measurements'];
        }

        return ['__isInitialized__', '' . "\0" . 'Entities\\Network' . "\0" . 'name', '' . "\0" . 'Entities\\Network' . "\0" . 'v4asn', '' . "\0" . 'Entities\\Network' . "\0" . 'v6asn', '' . "\0" . 'Entities\\Network' . "\0" . 'id', '' . "\0" . 'Entities\\Network' . "\0" . 'addresses', '' . "\0" . 'Entities\\Network' . "\0" . 'probes', '' . "\0" . 'Entities\\Network' . "\0" . 'requests', '' . "\0" . 'Entities\\Network' . "\0" . 'IXP', '' . "\0" . 'Entities\\Network' . "\0" . 'measurements'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Network $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setV4asn($v4asn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setV4asn', [$v4asn]);

        return parent::setV4asn($v4asn);
    }

    /**
     * {@inheritDoc}
     */
    public function getV4asn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getV4asn', []);

        return parent::getV4asn();
    }

    /**
     * {@inheritDoc}
     */
    public function setV6asn($v6asn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setV6asn', [$v6asn]);

        return parent::setV6asn($v6asn);
    }

    /**
     * {@inheritDoc}
     */
    public function getV6asn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getV6asn', []);

        return parent::getV6asn();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function addAddress(\Entities\Address $address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAddress', [$address]);

        return parent::addAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAddress(\Entities\Address $address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAddress', [$address]);

        return parent::removeAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddresses()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddresses', []);

        return parent::getAddresses();
    }

    /**
     * {@inheritDoc}
     */
    public function addProbe(\Entities\Probe $probe)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProbe', [$probe]);

        return parent::addProbe($probe);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProbe(\Entities\Probe $probe)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProbe', [$probe]);

        return parent::removeProbe($probe);
    }

    /**
     * {@inheritDoc}
     */
    public function getProbes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProbes', []);

        return parent::getProbes();
    }

    /**
     * {@inheritDoc}
     */
    public function addRequest(\Entities\Request $request)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRequest', [$request]);

        return parent::addRequest($request);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRequest(\Entities\Request $request)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRequest', [$request]);

        return parent::removeRequest($request);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequests()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequests', []);

        return parent::getRequests();
    }

    /**
     * {@inheritDoc}
     */
    public function setIXP(\Entities\IXP $iXP = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIXP', [$iXP]);

        return parent::setIXP($iXP);
    }

    /**
     * {@inheritDoc}
     */
    public function getIXP()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIXP', []);

        return parent::getIXP();
    }

    /**
     * {@inheritDoc}
     */
    public function addMeasurement(\Entities\Measurement $measurement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMeasurement', [$measurement]);

        return parent::addMeasurement($measurement);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMeasurement(\Entities\Measurement $measurement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMeasurement', [$measurement]);

        return parent::removeMeasurement($measurement);
    }

    /**
     * {@inheritDoc}
     */
    public function getMeasurements()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMeasurements', []);

        return parent::getMeasurements();
    }

}
